// Generated by gencpp from file ShapeColor_ObjectDetection/ObjectInfo.msg
// DO NOT EDIT!


#ifndef SHAPECOLOR_OBJECTDETECTION_MESSAGE_OBJECTINFO_H
#define SHAPECOLOR_OBJECTDETECTION_MESSAGE_OBJECTINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ShapeColor_ObjectDetection
{
template <class ContainerAllocator>
struct ObjectInfo_
{
  typedef ObjectInfo_<ContainerAllocator> Type;

  ObjectInfo_()
    : type()
    , prob(0.0)
    , tl_x(0)
    , tl_y(0)
    , width(0)
    , height(0)  {
    }
  ObjectInfo_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , prob(0.0)
    , tl_x(0)
    , tl_y(0)
    , width(0)
    , height(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef float _prob_type;
  _prob_type prob;

   typedef int32_t _tl_x_type;
  _tl_x_type tl_x;

   typedef int32_t _tl_y_type;
  _tl_y_type tl_y;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectInfo_

typedef ::ShapeColor_ObjectDetection::ObjectInfo_<std::allocator<void> > ObjectInfo;

typedef boost::shared_ptr< ::ShapeColor_ObjectDetection::ObjectInfo > ObjectInfoPtr;
typedef boost::shared_ptr< ::ShapeColor_ObjectDetection::ObjectInfo const> ObjectInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator1> & lhs, const ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.prob == rhs.prob &&
    lhs.tl_x == rhs.tl_x &&
    lhs.tl_y == rhs.tl_y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator1> & lhs, const ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ShapeColor_ObjectDetection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55a63526fe7c32ce41ef4e85ff85bb42";
  }

  static const char* value(const ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55a63526fe7c32ceULL;
  static const uint64_t static_value2 = 0x41ef4e85ff85bb42ULL;
};

template<class ContainerAllocator>
struct DataType< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ShapeColor_ObjectDetection/ObjectInfo";
  }

  static const char* value(const ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n"
"float32 prob\n"
"int32 tl_x\n"
"int32 tl_y\n"
"int32 width\n"
"int32 height\n"
;
  }

  static const char* value(const ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.prob);
      stream.next(m.tl_x);
      stream.next(m.tl_y);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ShapeColor_ObjectDetection::ObjectInfo_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "prob: ";
    Printer<float>::stream(s, indent + "  ", v.prob);
    s << indent << "tl_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tl_x);
    s << indent << "tl_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tl_y);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHAPECOLOR_OBJECTDETECTION_MESSAGE_OBJECTINFO_H
